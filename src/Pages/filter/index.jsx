import React, { useState } from "react";
import "./filter.scss";

function Filter() {
    // D·ªØ li·ªáu m·∫´u - b·∫°n c√≥ th·ªÉ thay b·∫±ng API call
    const [filterData] = useState({
        regions: [
            {
                id: 1,
                name: "Qu·∫≠n Ba ƒê√¨nh",
                cases: [
                    { id: 101, name: "Gia ƒë√¨nh b√† Nguy·ªÖn Th·ªã Lan", location: { lat: 21.0285, lng: 105.8542 }, description: "M·∫π gi√† ·ªëm ƒëau, con th·∫•t nghi·ªáp" },
                    { id: 102, name: "Anh Tr·∫ßn VƒÉn Minh", location: { lat: 21.0295, lng: 105.8552 }, description: "B·ªã tai n·∫°n lao ƒë·ªông, m·∫•t kh·∫£ nƒÉng l√†m vi·ªác" },
                    { id: 103, name: "Ch·ªã Ph·∫°m Thu H√†", location: { lat: 21.0305, lng: 105.8562 }, description: "G√≥a ch·ªìng, nu√¥i 3 con nh·ªè" }
                ]
            },
            {
                id: 2,
                name: "Qu·∫≠n Ho√†n Ki·∫øm",
                cases: [
                    { id: 201, name: "C·ª• L√™ VƒÉn S∆°n", location: { lat: 21.0245, lng: 105.8412 }, description: "S·ªëng m·ªôt m√¨nh, kh√¥ng n∆°i n∆∞∆°ng t·ª±a" },
                    { id: 202, name: "Gia ƒë√¨nh anh Ho√†ng Minh", location: { lat: 21.0255, lng: 105.8422 }, description: "Con b·ªã b·ªánh hi·ªÉm ngh√®o" }
                ]
            },
            {
                id: 3,
                name: "Qu·∫≠n ƒê·ªëng ƒêa",
                cases: [
                    { id: 301, name: "B√† Tr·∫ßn Th·ªã Hoa", location: { lat: 21.0145, lng: 105.8312 }, description: "Nh√† b·ªã ch√°y, m·∫•t ch·ªó ·ªü" },
                    { id: 302, name: "Anh Nguy·ªÖn ƒê·ª©c Anh", location: { lat: 21.0155, lng: 105.8322 }, description: "Th·∫•t nghi·ªáp l√¢u ng√†y, n·ª£ n·∫ßn ch·ªìng ch·∫•t" },
                    { id: 303, name: "Ch·ªã V≈© Th·ªã Mai", location: { lat: 21.0165, lng: 105.8332 }, description: "ƒê∆°n th√¢n nu√¥i con nh·ªè b·ªã khuy·∫øt t·∫≠t" }
                ]
            }
        ],
        allCityOption: {
            name: "To√†n th√†nh ph·ªë H√† N·ªôi",
            totalCases: 8
        }
    });

    const [selectedRegion, setSelectedRegion] = useState(null);
    const [searchTerm, setSearchTerm] = useState("");

    // H√†m x·ª≠ l√Ω khi click v√†o m·ªôt ho√†n c·∫£nh
    const handleCaseClick = (caseItem) => {
        console.log("Chuy·ªÉn ƒë·∫øn v·ªã tr√≠:", caseItem);
        // ·ªû ƒë√¢y b·∫°n s·∫Ω g·ªçi h√†m ƒë·ªÉ map di chuy·ªÉn ƒë·∫øn v·ªã tr√≠
        // V√≠ d·ª•: moveMapToLocation(caseItem.location);
        
        // C√≥ th·ªÉ dispatch event ho·∫∑c callback ƒë·ªÉ th√¥ng b√°o cho map component
        const event = new CustomEvent('moveToLocation', { 
            detail: { 
                location: caseItem.location,
                name: caseItem.name 
            } 
        });
        window.dispatchEvent(event);
    };

    // L·ªçc danh s√°ch theo search
    const getFilteredCases = () => {
        if (selectedRegion === "all") {
            return filterData.regions.flatMap(region => 
                region.cases.filter(c => 
                    c.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    c.description.toLowerCase().includes(searchTerm.toLowerCase())
                )
            );
        } else if (selectedRegion) {
            const region = filterData.regions.find(r => r.id === selectedRegion);
            return region ? region.cases.filter(c => 
                c.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                c.description.toLowerCase().includes(searchTerm.toLowerCase())
            ) : [];
        }
        return [];
    };

    const getTotalCases = () => {
        return filterData.regions.reduce((total, region) => total + region.cases.length, 0);
    };

    return (
        <div className="filter">
            <div className="filter__header">
                <h4>B·ªô l·ªçc ho√†n c·∫£nh kh√≥ khƒÉn</h4>
                <p className="filter__description">
                    Ch·ªçn khu v·ª±c ƒë·ªÉ xem danh s√°ch c√°c ho√†n c·∫£nh c·∫ßn h·ªó tr·ª£
                </p>
            </div>

            {/* T√¨m ki·∫øm */}
            <div className="filter__search">
                <input 
                    type="text"
                    placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c m√¥ t·∫£..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    disabled={!selectedRegion}
                />
            </div>

            {/* Ch·ªçn khu v·ª±c */}
            <div className="filter__regions">
                <h5>Ch·ªçn khu v·ª±c:</h5>
                
                {/* Option: To√†n th√†nh ph·ªë */}
                <div 
                    className={`filter__region-item ${selectedRegion === "all" ? "active" : ""}`}
                    onClick={() => setSelectedRegion("all")}
                >
                    <div className="region-header">
                        <span className="region-icon">üèôÔ∏è</span>
                        <span className="region-name">{filterData.allCityOption.name}</span>
                    </div>
                    <span className="region-count">{getTotalCases()} ho√†n c·∫£nh</span>
                </div>

                {/* C√°c qu·∫≠n */}
                {filterData.regions.map(region => (
                    <div 
                        key={region.id}
                        className={`filter__region-item ${selectedRegion === region.id ? "active" : ""}`}
                        onClick={() => setSelectedRegion(region.id)}
                    >
                        <div className="region-header">
                            <span className="region-icon">üìç</span>
                            <span className="region-name">{region.name}</span>
                        </div>
                        <span className="region-count">{region.cases.length} ho√†n c·∫£nh</span>
                    </div>
                ))}
            </div>

            {/* Danh s√°ch ho√†n c·∫£nh */}
            {selectedRegion && (
                <div className="filter__cases">
                    <div className="cases-header">
                        <h5>Danh s√°ch ho√†n c·∫£nh</h5>
                        <span className="cases-count">
                            {getFilteredCases().length} k·∫øt qu·∫£
                        </span>
                    </div>
                    
                    <div className="cases-list">
                        {getFilteredCases().length > 0 ? (
                            getFilteredCases().map(caseItem => (
                                <div 
                                    key={caseItem.id}
                                    className="case-item"
                                    onClick={() => handleCaseClick(caseItem)}
                                >
                                    <div className="case-icon">üìå</div>
                                    <div className="case-info">
                                        <h6 className="case-name">{caseItem.name}</h6>
                                        <p className="case-description">{caseItem.description}</p>
                                    </div>
                                    <div className="case-arrow">‚Üí</div>
                                </div>
                            ))
                        ) : (
                            <div className="no-results">
                                <p>Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p</p>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* H∆∞·ªõng d·∫´n */}
            {!selectedRegion && (
                <div className="filter__guide">
                    <div className="guide-icon">‚ÑπÔ∏è</div>
                    <p>Vui l√≤ng ch·ªçn m·ªôt khu v·ª±c ƒë·ªÉ xem danh s√°ch c√°c ho√†n c·∫£nh kh√≥ khƒÉn</p>
                </div>
            )}
        </div>
    );
}

export default Filter;